2023-02-13 22:27:02,491 - mmseg - INFO - Multi-processing start method is `None`
2023-02-13 22:27:02,501 - mmseg - INFO - OpenCV num_threads is `6
2023-02-13 22:27:02,583 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /data/apps/cuda/11.1
NVCC: Cuda compilation tools, release 11.1, V11.1.74
GCC: gcc (GCC) 7.3.0
PyTorch: 1.10.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0+cu111
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMSegmentation: 0.30.0+
------------------------------------------------------------

2023-02-13 22:27:02,583 - mmseg - INFO - Distributed training: False
2023-02-13 22:27:03,194 - mmseg - INFO - Config:
norm_cfg = dict(type='SyncBN', eps=0.001, requires_grad=True)
model = dict(
    type='EncoderDecoder',
    backbone=dict(
        type='CGNet',
        norm_cfg=dict(type='SyncBN', eps=0.001, requires_grad=True),
        in_channels=3,
        num_channels=(32, 64, 128),
        num_blocks=(3, 21),
        dilations=(2, 4),
        reductions=(8, 16)),
    decode_head=dict(
        type='FCNHead',
        in_channels=256,
        in_index=2,
        channels=256,
        num_convs=0,
        concat_input=False,
        dropout_ratio=0,
        num_classes=21,
        norm_cfg=dict(type='SyncBN', eps=0.001, requires_grad=True),
        loss_decode=dict(
            type='CrossEntropyLoss',
            use_sigmoid=False,
            loss_weight=1.0,
            class_weight=[
                2.5959933, 6.7415504, 3.5354059, 9.8663225, 9.690899, 9.369352,
                10.289121, 9.953208, 4.3097677, 9.490387, 7.674431, 9.396905,
                10.347791, 6.3927646, 10.226669, 10.241062, 10.280587,
                10.396974, 10.055647, 10.226669, 10.241062
            ])),
    train_cfg=dict(sampler=None),
    test_cfg=dict(mode='whole'))
dataset_type = 'PascalVOCDataset'
data_root = '/HOME/scz0aua/run/mmdetection/vocdata/VOCdevkit/VOC2007'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
crop_size = (680, 680)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),
    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(2048, 512),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=8,
    workers_per_gpu=4,
    train=dict(
        type='PascalVOCDataset',
        data_root='/HOME/scz0aua/run/mmdetection/vocdata/VOCdevkit/VOC2007',
        img_dir=
        '/HOME/scz0aua/run/mmdetection/vocdata/VOCdevkit/VOC2007/JPEGImages',
        ann_dir=
        '/HOME/scz0aua/run/mmdetection/vocdata/VOCdevkit/VOC2007/SegmentationClass',
        split=
        '/HOME/scz0aua/run/mmdetection/vocdata/VOCdevkit/VOC2007/ImageSets/Segmentation/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),
            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='PascalVOCDataset',
        data_root='/HOME/scz0aua/run/mmdetection/vocdata/VOCdevkit/VOC2007',
        img_dir=
        '/HOME/scz0aua/run/mmdetection/vocdata/VOCdevkit/VOC2007/JPEGImages',
        ann_dir=
        '/HOME/scz0aua/run/mmdetection/vocdata/VOCdevkit/VOC2007/SegmentationClass',
        split=
        '/HOME/scz0aua/run/mmdetection/vocdata/VOCdevkit/VOC2007/ImageSets/Segmentation/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='PascalVOCDataset',
        data_root='/HOME/scz0aua/run/mmdetection/vocdata/VOCdevkit/VOC2007',
        img_dir=
        '/HOME/scz0aua/run/mmdetection/vocdata/VOCdevkit/VOC2007/JPEGImages',
        ann_dir=
        '/HOME/scz0aua/run/mmdetection/vocdata/VOCdevkit/VOC2007/SegmentationClass',
        split=
        '/HOME/scz0aua/run/mmdetection/vocdata/VOCdevkit/VOC2007/ImageSets/Segmentation/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = '/HOME/scz0aua/run/mmsegmentation-master/checkpoints/cgnet_680x680_60k_cityscapes_20201101_110253-4c0b2f2d.pth'
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = True
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[1])
total_iters = 1000
checkpoint_config = dict(by_epoch=False, interval=1000)
evaluation = dict(interval=1000, metric='mIoU')
work_dir = 'work/voc2007'
gpu_ids = [0]
auto_resume = False

2023-02-13 22:27:03,196 - mmseg - INFO - Set random seed to 1351377774, deterministic: False
2023-02-13 22:27:03,261 - mmseg - INFO - initialize CGNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d', 'Linear']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}, {'type': 'Constant', 'val': 0, 'layer': 'PReLU'}]
2023-02-13 22:27:03,288 - mmseg - INFO - initialize FCNHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
Name of parameter - Initialization information

backbone.stem.0.conv.weight - torch.Size([32, 3, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stem.0.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stem.0.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stem.0.activate.weight - torch.Size([32]): 
ConstantInit: val=0, bias=0 

backbone.stem.1.conv.weight - torch.Size([32, 32, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stem.1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stem.1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stem.1.activate.weight - torch.Size([32]): 
ConstantInit: val=0, bias=0 

backbone.stem.2.conv.weight - torch.Size([32, 32, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stem.2.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stem.2.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stem.2.activate.weight - torch.Size([32]): 
ConstantInit: val=0, bias=0 

backbone.norm_prelu_0.0.weight - torch.Size([35]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.norm_prelu_0.0.bias - torch.Size([35]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.norm_prelu_0.1.weight - torch.Size([35]): 
ConstantInit: val=0, bias=0 

backbone.level1.0.conv1x1.conv.weight - torch.Size([64, 35, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.0.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.0.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.0.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level1.0.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.0.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.0.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level1.0.bottleneck.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.0.f_glo.fc.0.weight - torch.Size([8, 64]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.0.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.0.f_glo.fc.2.weight - torch.Size([64, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.0.f_glo.fc.2.bias - torch.Size([64]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.1.conv1x1.conv.weight - torch.Size([32, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.1.conv1x1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.1.conv1x1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.1.conv1x1.activate.weight - torch.Size([32]): 
ConstantInit: val=0, bias=0 

backbone.level1.1.f_loc.weight - torch.Size([32, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.1.f_sur.weight - torch.Size([32, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level1.1.f_glo.fc.0.weight - torch.Size([8, 64]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.1.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.1.f_glo.fc.2.weight - torch.Size([64, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.1.f_glo.fc.2.bias - torch.Size([64]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.2.conv1x1.conv.weight - torch.Size([32, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.2.conv1x1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.2.conv1x1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.2.conv1x1.activate.weight - torch.Size([32]): 
ConstantInit: val=0, bias=0 

backbone.level1.2.f_loc.weight - torch.Size([32, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.2.f_sur.weight - torch.Size([32, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.2.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level1.2.f_glo.fc.0.weight - torch.Size([8, 64]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.2.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.2.f_glo.fc.2.weight - torch.Size([64, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.2.f_glo.fc.2.bias - torch.Size([64]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.norm_prelu_1.0.weight - torch.Size([131]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.norm_prelu_1.0.bias - torch.Size([131]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.norm_prelu_1.1.weight - torch.Size([131]): 
ConstantInit: val=0, bias=0 

backbone.level2.0.conv1x1.conv.weight - torch.Size([128, 131, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.0.conv1x1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.0.conv1x1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.0.conv1x1.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.0.f_loc.weight - torch.Size([128, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.0.f_sur.weight - torch.Size([128, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.0.activate.weight - torch.Size([256]): 
ConstantInit: val=0, bias=0 

backbone.level2.0.bottleneck.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.0.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.0.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.0.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.0.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.1.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.1.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.1.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.1.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.1.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.1.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.1.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.1.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.1.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.1.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.1.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.2.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.2.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.2.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.2.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.2.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.2.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.2.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.2.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.2.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.2.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.2.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.3.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.3.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.3.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.3.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.3.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.3.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.3.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.3.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.3.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.3.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.3.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.3.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.3.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.4.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.4.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.4.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.4.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.4.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.4.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.4.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.4.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.4.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.4.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.4.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.4.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.4.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.5.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.5.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.5.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.5.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.5.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.5.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.5.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.5.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.5.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.5.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.5.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.5.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.5.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.6.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.6.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.6.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.6.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.6.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.6.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.6.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.6.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.6.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.6.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.6.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.6.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.6.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.7.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.7.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.7.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.7.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.7.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.7.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.7.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.7.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.7.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.7.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.7.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.7.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.7.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.8.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.8.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.8.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.8.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.8.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.8.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.8.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.8.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.8.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.8.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.8.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.8.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.8.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.9.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.9.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.9.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.9.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.9.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.9.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.9.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.9.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.9.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.9.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.9.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.9.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.9.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.10.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.10.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.10.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.10.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.10.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.10.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.10.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.10.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.10.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.10.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.10.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.10.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.10.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.11.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.11.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.11.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.11.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.11.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.11.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.11.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.11.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.11.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.11.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.11.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.11.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.11.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.12.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.12.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.12.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.12.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.12.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.12.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.12.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.12.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.12.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.12.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.12.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.12.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.12.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.13.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.13.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.13.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.13.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.13.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.13.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.13.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.13.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.13.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.13.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.13.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.13.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.13.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.14.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.14.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.14.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.14.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.14.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.14.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.14.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.14.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.14.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.14.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.14.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.14.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.14.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.15.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.15.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.15.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.15.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.15.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.15.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.15.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.15.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.15.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.15.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.15.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.15.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.15.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.16.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.16.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.16.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.16.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.16.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.16.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.16.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.16.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.16.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.16.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.16.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.16.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.16.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.17.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.17.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.17.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.17.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.17.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.17.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.17.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.17.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.17.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.17.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.17.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.17.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.17.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.18.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.18.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.18.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.18.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.18.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.18.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.18.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.18.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.18.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.18.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.18.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.18.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.18.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.19.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.19.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.19.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.19.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.19.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.19.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.19.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.19.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.19.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.19.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.19.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.19.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.19.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.20.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.20.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.20.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.20.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.20.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.20.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.20.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.20.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.20.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.20.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.20.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.20.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.20.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.norm_prelu_2.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.norm_prelu_2.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.norm_prelu_2.1.weight - torch.Size([256]): 
ConstantInit: val=0, bias=0 

decode_head.conv_seg.weight - torch.Size([21, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([21]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-13 22:27:03,297 - mmseg - INFO - EncoderDecoder(
  (backbone): CGNet(
    (stem): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): _BatchNormXd(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=32)
      )
      (1): ConvModule(
        (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): _BatchNormXd(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=32)
      )
      (2): ConvModule(
        (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): _BatchNormXd(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=32)
      )
    )
    (inject_2x): InputInjection(
      (pool): ModuleList(
        (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
      )
    )
    (inject_4x): InputInjection(
      (pool): ModuleList(
        (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
        (1): AvgPool2d(kernel_size=3, stride=2, padding=1)
      )
    )
    (norm_prelu_0): Sequential(
      (0): _BatchNormXd(35, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      (1): PReLU(num_parameters=35)
    )
    (level1): ModuleList(
      (0): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(35, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=64)
        )
        (f_loc): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (f_sur): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
        (bn): _BatchNormXd(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=128)
        (bottleneck): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=64, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=64, bias=True)
            (3): Sigmoid()
          )
        )
      )
      (1): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=32)
        )
        (f_loc): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (f_sur): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
        (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=64)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=64, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=64, bias=True)
            (3): Sigmoid()
          )
        )
      )
      (2): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=32)
        )
        (f_loc): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (f_sur): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
        (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=64)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=64, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=64, bias=True)
            (3): Sigmoid()
          )
        )
      )
    )
    (norm_prelu_1): Sequential(
      (0): _BatchNormXd(131, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      (1): PReLU(num_parameters=131)
    )
    (level2): ModuleList(
      (0): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(131, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn): _BatchNormXd(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=128)
        )
        (f_loc): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
        (f_sur): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=128, bias=False)
        (bn): _BatchNormXd(256, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=256)
        (bottleneck): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=128, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=128, bias=True)
            (3): Sigmoid()
          )
        )
      )
      (1): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=64)
        )
        (f_loc): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (f_sur): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=64, bias=False)
        (bn): _BatchNormXd(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=128)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=128, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=128, bias=True)
            (3): Sigmoid()
          )
        )
      )
      (2): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=64)
        )
        (f_loc): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (f_sur): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=64, bias=False)
        (bn): _BatchNormXd(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=128)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=128, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=128, bias=True)
            (3): Sigmoid()
          )
        )
      )
      (3): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=64)
        )
        (f_loc): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (f_sur): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=64, bias=False)
        (bn): _BatchNormXd(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=128)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=128, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=128, bias=True)
            (3): Sigmoid()
          )
        )
      )
      (4): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=64)
        )
        (f_loc): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (f_sur): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=64, bias=False)
        (bn): _BatchNormXd(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=128)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=128, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=128, bias=True)
            (3): Sigmoid()
          )
        )
      )
      (5): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=64)
        )
        (f_loc): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (f_sur): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=64, bias=False)
        (bn): _BatchNormXd(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=128)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=128, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=128, bias=True)
            (3): Sigmoid()
          )
        )
      )
      (6): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=64)
        )
        (f_loc): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (f_sur): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=64, bias=False)
        (bn): _BatchNormXd(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=128)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=128, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=128, bias=True)
            (3): Sigmoid()
          )
        )
      )
      (7): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=64)
        )
        (f_loc): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (f_sur): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=64, bias=False)
        (bn): _BatchNormXd(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=128)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=128, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=128, bias=True)
            (3): Sigmoid()
          )
        )
      )
      (8): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=64)
        )
        (f_loc): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (f_sur): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=64, bias=False)
        (bn): _BatchNormXd(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=128)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=128, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=128, bias=True)
            (3): Sigmoid()
          )
        )
      )
      (9): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=64)
        )
        (f_loc): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (f_sur): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=64, bias=False)
        (bn): _BatchNormXd(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=128)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=128, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=128, bias=True)
            (3): Sigmoid()
          )
        )
      )
      (10): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=64)
        )
        (f_loc): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (f_sur): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=64, bias=False)
        (bn): _BatchNormXd(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=128)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=128, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=128, bias=True)
            (3): Sigmoid()
          )
        )
      )
      (11): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=64)
        )
        (f_loc): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (f_sur): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=64, bias=False)
        (bn): _BatchNormXd(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=128)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=128, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=128, bias=True)
            (3): Sigmoid()
          )
        )
      )
      (12): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=64)
        )
        (f_loc): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (f_sur): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=64, bias=False)
        (bn): _BatchNormXd(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=128)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=128, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=128, bias=True)
            (3): Sigmoid()
          )
        )
      )
      (13): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=64)
        )
        (f_loc): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (f_sur): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=64, bias=False)
        (bn): _BatchNormXd(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=128)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=128, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=128, bias=True)
            (3): Sigmoid()
          )
        )
      )
      (14): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=64)
        )
        (f_loc): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (f_sur): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=64, bias=False)
        (bn): _BatchNormXd(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=128)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=128, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=128, bias=True)
            (3): Sigmoid()
          )
        )
      )
      (15): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=64)
        )
        (f_loc): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (f_sur): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=64, bias=False)
        (bn): _BatchNormXd(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=128)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=128, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=128, bias=True)
            (3): Sigmoid()
          )
        )
      )
      (16): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=64)
        )
        (f_loc): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (f_sur): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=64, bias=False)
        (bn): _BatchNormXd(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=128)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=128, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=128, bias=True)
            (3): Sigmoid()
          )
        )
      )
      (17): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=64)
        )
        (f_loc): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (f_sur): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=64, bias=False)
        (bn): _BatchNormXd(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=128)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=128, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=128, bias=True)
            (3): Sigmoid()
          )
        )
      )
      (18): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=64)
        )
        (f_loc): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (f_sur): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=64, bias=False)
        (bn): _BatchNormXd(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=128)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=128, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=128, bias=True)
            (3): Sigmoid()
          )
        )
      )
      (19): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=64)
        )
        (f_loc): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (f_sur): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=64, bias=False)
        (bn): _BatchNormXd(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=128)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=128, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=128, bias=True)
            (3): Sigmoid()
          )
        )
      )
      (20): ContextGuidedBlock(
        (conv1x1): ConvModule(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
          (activate): PReLU(num_parameters=64)
        )
        (f_loc): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (f_sur): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=64, bias=False)
        (bn): _BatchNormXd(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): PReLU(num_parameters=128)
        (f_glo): GlobalContextExtractor(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Sequential(
            (0): Linear(in_features=128, out_features=8, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=8, out_features=128, bias=True)
            (3): Sigmoid()
          )
        )
      )
    )
    (norm_prelu_2): Sequential(
      (0): _BatchNormXd(256, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      (1): PReLU(num_parameters=256)
    )
  )
  init_cfg=[{'type': 'Kaiming', 'layer': ['Conv2d', 'Linear']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}, {'type': 'Constant', 'val': 0, 'layer': 'PReLU'}]
  (decode_head): FCNHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss(avg_non_ignore=False)
    (conv_seg): Conv2d(256, 21, kernel_size=(1, 1), stride=(1, 1))
    (convs): Identity()
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
)
2023-02-13 22:27:03,302 - mmseg - INFO - Loaded 209 images
2023-02-13 22:27:08,776 - mmseg - INFO - Loaded 213 images
2023-02-13 22:27:08,777 - mmseg - INFO - load checkpoint from local path: /HOME/scz0aua/run/mmsegmentation-master/checkpoints/cgnet_680x680_60k_cityscapes_20201101_110253-4c0b2f2d.pth
2023-02-13 22:27:08,824 - mmseg - WARNING - The model and loaded state dict do not match exactly

size mismatch for decode_head.conv_seg.weight: copying a param with shape torch.Size([19, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([21, 256, 1, 1]).
size mismatch for decode_head.conv_seg.bias: copying a param with shape torch.Size([19]) from checkpoint, the shape in current model is torch.Size([21]).
2023-02-13 22:27:08,825 - mmseg - INFO - Start running, host: scz0aua@g0042, work_dir: /data/run01/scz0aua/mmsegmentation-master/work/voc2007
2023-02-13 22:27:08,825 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-13 22:27:08,825 - mmseg - INFO - workflow: [('train', 1)], max: 1000 iters
2023-02-13 22:27:08,825 - mmseg - INFO - Checkpoints will be saved to /data/run01/scz0aua/mmsegmentation-master/work/voc2007 by HardDiskBackend.
2023-02-13 22:27:22,907 - mmseg - INFO - Iter [50/1000]	lr: 1.000e-04, eta: 0:04:04, time: 0.258, data_time: 0.113, memory: 4310, decode.loss_ce: 12.4340, decode.acc_seg: 54.2464, loss: 12.4340
2023-02-13 22:27:32,762 - mmseg - INFO - Iter [100/1000]	lr: 1.000e-04, eta: 0:03:24, time: 0.197, data_time: 0.094, memory: 4310, decode.loss_ce: 10.6878, decode.acc_seg: 65.4793, loss: 10.6878
2023-02-13 22:27:42,618 - mmseg - INFO - Iter [150/1000]	lr: 1.000e-04, eta: 0:03:04, time: 0.197, data_time: 0.095, memory: 4310, decode.loss_ce: 10.2306, decode.acc_seg: 65.4536, loss: 10.2306
2023-02-13 22:27:52,415 - mmseg - INFO - Iter [200/1000]	lr: 1.000e-04, eta: 0:02:49, time: 0.196, data_time: 0.095, memory: 4310, decode.loss_ce: 9.2032, decode.acc_seg: 66.9420, loss: 9.2032
2023-02-13 22:28:02,246 - mmseg - INFO - Iter [250/1000]	lr: 1.000e-04, eta: 0:02:36, time: 0.197, data_time: 0.096, memory: 4310, decode.loss_ce: 9.1796, decode.acc_seg: 66.4218, loss: 9.1796
2023-02-13 22:28:12,076 - mmseg - INFO - Iter [300/1000]	lr: 1.000e-04, eta: 0:02:24, time: 0.197, data_time: 0.096, memory: 4310, decode.loss_ce: 9.0586, decode.acc_seg: 65.0814, loss: 9.0586
2023-02-13 22:28:21,858 - mmseg - INFO - Iter [350/1000]	lr: 1.000e-04, eta: 0:02:13, time: 0.196, data_time: 0.095, memory: 4310, decode.loss_ce: 9.0903, decode.acc_seg: 64.0043, loss: 9.0903
2023-02-13 22:28:31,691 - mmseg - INFO - Iter [400/1000]	lr: 1.000e-04, eta: 0:02:02, time: 0.197, data_time: 0.095, memory: 4310, decode.loss_ce: 8.7063, decode.acc_seg: 65.8175, loss: 8.7063
2023-02-13 22:28:41,468 - mmseg - INFO - Iter [450/1000]	lr: 1.000e-04, eta: 0:01:51, time: 0.196, data_time: 0.095, memory: 4310, decode.loss_ce: 8.4742, decode.acc_seg: 66.7828, loss: 8.4742
2023-02-13 22:28:51,219 - mmseg - INFO - Iter [500/1000]	lr: 1.000e-04, eta: 0:01:41, time: 0.195, data_time: 0.094, memory: 4310, decode.loss_ce: 8.1632, decode.acc_seg: 66.4831, loss: 8.1632
2023-02-13 22:29:00,972 - mmseg - INFO - Iter [550/1000]	lr: 1.000e-04, eta: 0:01:30, time: 0.195, data_time: 0.095, memory: 4310, decode.loss_ce: 8.1458, decode.acc_seg: 65.9951, loss: 8.1458
2023-02-13 22:29:10,831 - mmseg - INFO - Iter [600/1000]	lr: 1.000e-04, eta: 0:01:20, time: 0.197, data_time: 0.096, memory: 4310, decode.loss_ce: 7.8974, decode.acc_seg: 67.5562, loss: 7.8974
2023-02-13 22:29:18,374 - mmseg - INFO - Iter [650/1000]	lr: 1.000e-04, eta: 0:01:09, time: 0.151, data_time: 0.050, memory: 4310, decode.loss_ce: 7.9152, decode.acc_seg: 65.7773, loss: 7.9152
2023-02-13 22:29:28,169 - mmseg - INFO - Iter [700/1000]	lr: 1.000e-04, eta: 0:00:59, time: 0.196, data_time: 0.094, memory: 4310, decode.loss_ce: 7.1774, decode.acc_seg: 68.4857, loss: 7.1774
2023-02-13 22:29:37,973 - mmseg - INFO - Iter [750/1000]	lr: 1.000e-04, eta: 0:00:49, time: 0.196, data_time: 0.095, memory: 4310, decode.loss_ce: 7.8046, decode.acc_seg: 66.7151, loss: 7.8046
2023-02-13 22:29:47,743 - mmseg - INFO - Iter [800/1000]	lr: 1.000e-04, eta: 0:00:39, time: 0.195, data_time: 0.094, memory: 4310, decode.loss_ce: 7.5498, decode.acc_seg: 67.5195, loss: 7.5498
2023-02-13 22:29:57,557 - mmseg - INFO - Iter [850/1000]	lr: 1.000e-04, eta: 0:00:29, time: 0.196, data_time: 0.095, memory: 4310, decode.loss_ce: 7.2525, decode.acc_seg: 68.4360, loss: 7.2525
2023-02-13 22:30:07,275 - mmseg - INFO - Iter [900/1000]	lr: 1.000e-04, eta: 0:00:19, time: 0.194, data_time: 0.093, memory: 4310, decode.loss_ce: 7.4577, decode.acc_seg: 67.3572, loss: 7.4577
2023-02-13 22:30:17,154 - mmseg - INFO - Iter [950/1000]	lr: 1.000e-04, eta: 0:00:09, time: 0.198, data_time: 0.096, memory: 4310, decode.loss_ce: 7.4849, decode.acc_seg: 66.5227, loss: 7.4849
2023-02-13 22:30:26,992 - mmseg - INFO - Saving checkpoint at 1000 iterations
2023-02-13 22:30:27,039 - mmseg - INFO - Exp name: cgnet_voc2007.py
2023-02-13 22:30:27,039 - mmseg - INFO - Iter [1000/1000]	lr: 1.000e-04, eta: 0:00:00, time: 0.198, data_time: 0.095, memory: 4310, decode.loss_ce: 7.4351, decode.acc_seg: 66.5712, loss: 7.4351
2023-02-13 22:30:41,535 - mmseg - INFO - per class results:
2023-02-13 22:30:41,540 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 76.78 | 84.36 |
|  aeroplane  |  0.0  |  0.0  |
|   bicycle   |  0.0  |  0.0  |
|     bird    |  0.0  |  0.0  |
|     boat    |  0.0  |  0.0  |
|    bottle   |  0.0  |  0.0  |
|     bus     | 22.83 |  95.9 |
|     car     | 19.27 | 29.48 |
|     cat     |  0.0  |  0.0  |
|    chair    |  0.0  |  0.0  |
|     cow     |  0.0  |  0.0  |
| diningtable |  0.0  |  0.0  |
|     dog     | 10.62 | 29.76 |
|    horse    |  0.0  |  0.0  |
|  motorbike  | 29.54 | 35.98 |
|    person   | 28.39 | 91.61 |
| pottedplant |  0.0  |  0.0  |
|    sheep    |  0.0  |  0.0  |
|     sofa    |  0.0  |  0.0  |
|    train    |  0.27 |  0.27 |
|  tvmonitor  |  8.71 | 17.36 |
+-------------+-------+-------+
2023-02-13 22:30:41,540 - mmseg - INFO - Summary:
2023-02-13 22:30:41,540 - mmseg - INFO - 
+-------+------+-------+
|  aAcc | mIoU |  mAcc |
+-------+------+-------+
| 70.65 | 9.35 | 18.32 |
+-------+------+-------+
2023-02-13 22:30:41,540 - mmseg - INFO - Exp name: cgnet_voc2007.py
2023-02-13 22:30:41,540 - mmseg - INFO - Iter(val) [213]	aAcc: 0.7065, mIoU: 0.0935, mAcc: 0.1832, IoU.background: 0.7678, IoU.aeroplane: 0.0000, IoU.bicycle: 0.0000, IoU.bird: 0.0000, IoU.boat: 0.0000, IoU.bottle: 0.0000, IoU.bus: 0.2283, IoU.car: 0.1927, IoU.cat: 0.0000, IoU.chair: 0.0000, IoU.cow: 0.0000, IoU.diningtable: 0.0000, IoU.dog: 0.1062, IoU.horse: 0.0000, IoU.motorbike: 0.2954, IoU.person: 0.2839, IoU.pottedplant: 0.0000, IoU.sheep: 0.0000, IoU.sofa: 0.0000, IoU.train: 0.0027, IoU.tvmonitor: 0.0871, Acc.background: 0.8436, Acc.aeroplane: 0.0000, Acc.bicycle: 0.0000, Acc.bird: 0.0000, Acc.boat: 0.0000, Acc.bottle: 0.0000, Acc.bus: 0.9590, Acc.car: 0.2948, Acc.cat: 0.0000, Acc.chair: 0.0000, Acc.cow: 0.0000, Acc.diningtable: 0.0000, Acc.dog: 0.2976, Acc.horse: 0.0000, Acc.motorbike: 0.3598, Acc.person: 0.9161, Acc.pottedplant: 0.0000, Acc.sheep: 0.0000, Acc.sofa: 0.0000, Acc.train: 0.0027, Acc.tvmonitor: 0.1736
