2023-02-10 23:06:26,068 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /data/apps/cuda/11.1
NVCC: Cuda compilation tools, release 11.1, V11.1.74
GCC: gcc (GCC) 7.3.0
PyTorch: 1.10.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0+cu111
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMDetection: 2.28.1+c14dd6c
------------------------------------------------------------

2023-02-10 23:06:26,919 - mmdet - INFO - Distributed training: False
2023-02-10 23:06:27,712 - mmdet - INFO - Config:
model = dict(
    type='FasterRCNN',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=20,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=-1,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.5,
                neg_iou_thr=0.5,
                min_pos_iou=0.5,
                match_low_quality=False,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            pos_weight=-1,
            debug=False)),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100)))
dataset_type = 'VOCDataset'
data_root = '/HOME/scz0aua/run/mmdetection/vocdata/VOCdevkit/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1000, 600), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1000, 600),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=8,
    workers_per_gpu=2,
    train=dict(
        type='RepeatDataset',
        times=3,
        dataset=dict(
            type='VOCDataset',
            ann_file=
            '/HOME/scz0aua/run/mmdetection/vocdata/VOCdevkit/VOC2007/ImageSets/Main/trainval.txt',
            img_prefix=
            '/HOME/scz0aua/run/mmdetection/vocdata/VOCdevkit/VOC2007/',
            pipeline=[
                dict(type='LoadImageFromFile'),
                dict(type='LoadAnnotations', with_bbox=True),
                dict(type='Resize', img_scale=(1000, 600), keep_ratio=True),
                dict(type='RandomFlip', flip_ratio=0.5),
                dict(
                    type='Normalize',
                    mean=[123.675, 116.28, 103.53],
                    std=[58.395, 57.12, 57.375],
                    to_rgb=True),
                dict(type='Pad', size_divisor=32),
                dict(type='DefaultFormatBundle'),
                dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
            ])),
    val=dict(
        type='VOCDataset',
        ann_file=
        '/HOME/scz0aua/run/mmdetection/vocdata/VOCdevkit/VOC2007/ImageSets/Main/val.txt',
        img_prefix='/HOME/scz0aua/run/mmdetection/vocdata/VOCdevkit/VOC2007/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1000, 600),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='VOCDataset',
        ann_file=
        '/HOME/scz0aua/run/mmdetection/vocdata/VOCdevkit/VOC2007/ImageSets/Main/val.txt',
        img_prefix='/HOME/scz0aua/run/mmdetection/vocdata/VOCdevkit/VOC2007/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1000, 600),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='mAP')
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
auto_scale_lr = dict(enable=False, base_batch_size=16)
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[3])
runner = dict(type='EpochBasedRunner', max_epochs=10)
work_dir = 'work/voc2007'
auto_resume = False
gpu_ids = [0]

2023-02-10 23:06:27,716 - mmdet - INFO - Set random seed to 1762596215, deterministic: False
2023-02-10 23:06:28,178 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet50'}
2023-02-10 23:06:28,568 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2023-02-10 23:06:28,584 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2023-02-10 23:06:28,588 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([21, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([21]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([80, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([80]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2023-02-10 23:06:39,330 - mmdet - INFO - Automatic scaling of learning rate (LR) has been disabled.
2023-02-10 23:06:40,456 - mmdet - INFO - Start running, host: scz0aua@g0042, work_dir: /data/run01/scz0aua/mmdetection/work/voc2007
2023-02-10 23:06:40,458 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-10 23:06:40,458 - mmdet - INFO - workflow: [('train', 1)], max: 10 epochs
2023-02-10 23:06:40,458 - mmdet - INFO - Checkpoints will be saved to /data/run01/scz0aua/mmdetection/work/voc2007 by HardDiskBackend.
2023-02-10 23:07:30,620 - mmdet - INFO - Epoch [1][50/1880]	lr: 1.000e-02, eta: 5:12:36, time: 1.000, data_time: 0.066, memory: 8095, loss_rpn_cls: 0.1608, loss_rpn_bbox: 0.0251, loss_cls: 0.3589, acc: 94.3750, loss_bbox: 0.1406, loss: 0.6854
2023-02-10 23:08:16,536 - mmdet - INFO - Epoch [1][100/1880]	lr: 1.000e-02, eta: 4:59:11, time: 0.920, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0654, loss_rpn_bbox: 0.0220, loss_cls: 0.2756, acc: 95.4209, loss_bbox: 0.1813, loss: 0.5442
2023-02-10 23:08:59,774 - mmdet - INFO - Epoch [1][150/1880]	lr: 1.000e-02, eta: 4:48:23, time: 0.863, data_time: 0.010, memory: 8095, loss_rpn_cls: 0.0566, loss_rpn_bbox: 0.0227, loss_cls: 0.2880, acc: 94.8203, loss_bbox: 0.2069, loss: 0.5742
2023-02-10 23:09:46,171 - mmdet - INFO - Epoch [1][200/1880]	lr: 1.000e-02, eta: 4:47:36, time: 0.928, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0519, loss_rpn_bbox: 0.0231, loss_cls: 0.2943, acc: 94.5996, loss_bbox: 0.2140, loss: 0.5832
2023-02-10 23:10:31,863 - mmdet - INFO - Epoch [1][250/1880]	lr: 1.000e-02, eta: 4:45:59, time: 0.914, data_time: 0.016, memory: 8095, loss_rpn_cls: 0.0442, loss_rpn_bbox: 0.0231, loss_cls: 0.2786, acc: 94.4697, loss_bbox: 0.2202, loss: 0.5660
2023-02-10 23:11:16,209 - mmdet - INFO - Epoch [1][300/1880]	lr: 1.000e-02, eta: 4:43:15, time: 0.887, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0373, loss_rpn_bbox: 0.0207, loss_cls: 0.2651, acc: 94.4282, loss_bbox: 0.2231, loss: 0.5462
2023-02-10 23:11:59,884 - mmdet - INFO - Epoch [1][350/1880]	lr: 1.000e-02, eta: 4:40:29, time: 0.873, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0345, loss_rpn_bbox: 0.0204, loss_cls: 0.2611, acc: 94.6812, loss_bbox: 0.2146, loss: 0.5307
2023-02-10 23:12:44,662 - mmdet - INFO - Epoch [1][400/1880]	lr: 1.000e-02, eta: 4:39:09, time: 0.897, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0338, loss_rpn_bbox: 0.0215, loss_cls: 0.2645, acc: 94.1196, loss_bbox: 0.2324, loss: 0.5521
2023-02-10 23:13:28,035 - mmdet - INFO - Epoch [1][450/1880]	lr: 1.000e-02, eta: 4:36:54, time: 0.866, data_time: 0.010, memory: 8095, loss_rpn_cls: 0.0340, loss_rpn_bbox: 0.0218, loss_cls: 0.2776, acc: 93.9043, loss_bbox: 0.2376, loss: 0.5710
2023-02-10 23:14:10,455 - mmdet - INFO - Epoch [1][500/1880]	lr: 1.000e-02, eta: 4:34:24, time: 0.848, data_time: 0.012, memory: 8095, loss_rpn_cls: 0.0315, loss_rpn_bbox: 0.0205, loss_cls: 0.2503, acc: 94.3965, loss_bbox: 0.2203, loss: 0.5226
2023-02-10 23:14:56,927 - mmdet - INFO - Epoch [1][550/1880]	lr: 1.000e-02, eta: 4:34:28, time: 0.929, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0305, loss_rpn_bbox: 0.0209, loss_cls: 0.2628, acc: 93.9443, loss_bbox: 0.2320, loss: 0.5462
2023-02-10 23:15:41,283 - mmdet - INFO - Epoch [1][600/1880]	lr: 1.000e-02, eta: 4:33:22, time: 0.888, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0300, loss_rpn_bbox: 0.0227, loss_cls: 0.2688, acc: 93.8232, loss_bbox: 0.2335, loss: 0.5550
2023-02-10 23:16:25,785 - mmdet - INFO - Epoch [1][650/1880]	lr: 1.000e-02, eta: 4:32:19, time: 0.888, data_time: 0.010, memory: 8095, loss_rpn_cls: 0.0266, loss_rpn_bbox: 0.0202, loss_cls: 0.2604, acc: 93.9243, loss_bbox: 0.2272, loss: 0.5344
2023-02-10 23:17:12,130 - mmdet - INFO - Epoch [1][700/1880]	lr: 1.000e-02, eta: 4:32:09, time: 0.927, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0279, loss_rpn_bbox: 0.0218, loss_cls: 0.2507, acc: 93.7046, loss_bbox: 0.2343, loss: 0.5348
2023-02-10 23:17:58,294 - mmdet - INFO - Epoch [1][750/1880]	lr: 1.000e-02, eta: 4:31:49, time: 0.923, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0310, loss_rpn_bbox: 0.0224, loss_cls: 0.2568, acc: 93.4419, loss_bbox: 0.2401, loss: 0.5503
2023-02-10 23:18:43,979 - mmdet - INFO - Epoch [1][800/1880]	lr: 1.000e-02, eta: 4:31:17, time: 0.915, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0255, loss_rpn_bbox: 0.0220, loss_cls: 0.2369, acc: 93.7593, loss_bbox: 0.2275, loss: 0.5119
2023-02-10 23:19:28,719 - mmdet - INFO - Epoch [1][850/1880]	lr: 1.000e-02, eta: 4:30:20, time: 0.893, data_time: 0.010, memory: 8095, loss_rpn_cls: 0.0255, loss_rpn_bbox: 0.0221, loss_cls: 0.2210, acc: 94.1445, loss_bbox: 0.2112, loss: 0.4797
2023-02-10 23:20:11,671 - mmdet - INFO - Epoch [1][900/1880]	lr: 1.000e-02, eta: 4:28:51, time: 0.859, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0252, loss_rpn_bbox: 0.0193, loss_cls: 0.1960, acc: 94.7080, loss_bbox: 0.1962, loss: 0.4368
2023-02-10 23:20:55,443 - mmdet - INFO - Epoch [1][950/1880]	lr: 1.000e-02, eta: 4:27:41, time: 0.875, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0226, loss_rpn_bbox: 0.0202, loss_cls: 0.2383, acc: 93.3999, loss_bbox: 0.2369, loss: 0.5180
2023-02-10 23:21:37,143 - mmdet - INFO - Exp name: faster_rcnn_voc2007.py
2023-02-10 23:21:37,144 - mmdet - INFO - Epoch [1][1000/1880]	lr: 1.000e-02, eta: 4:25:58, time: 0.834, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0249, loss_rpn_bbox: 0.0192, loss_cls: 0.2259, acc: 93.9600, loss_bbox: 0.2169, loss: 0.4870
2023-02-10 23:22:22,196 - mmdet - INFO - Epoch [1][1050/1880]	lr: 1.000e-02, eta: 4:25:17, time: 0.901, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0236, loss_rpn_bbox: 0.0169, loss_cls: 0.2077, acc: 94.2041, loss_bbox: 0.2046, loss: 0.4527
2023-02-10 23:23:05,745 - mmdet - INFO - Epoch [1][1100/1880]	lr: 1.000e-02, eta: 4:24:12, time: 0.872, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0227, loss_rpn_bbox: 0.0179, loss_cls: 0.2091, acc: 93.8267, loss_bbox: 0.2277, loss: 0.4774
2023-02-10 23:23:50,674 - mmdet - INFO - Epoch [1][1150/1880]	lr: 1.000e-02, eta: 4:23:29, time: 0.897, data_time: 0.010, memory: 8095, loss_rpn_cls: 0.0224, loss_rpn_bbox: 0.0192, loss_cls: 0.1961, acc: 94.2241, loss_bbox: 0.2103, loss: 0.4479
2023-02-10 23:24:34,832 - mmdet - INFO - Epoch [1][1200/1880]	lr: 1.000e-02, eta: 4:22:36, time: 0.885, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0221, loss_rpn_bbox: 0.0207, loss_cls: 0.1977, acc: 94.1304, loss_bbox: 0.2154, loss: 0.4559
2023-02-10 23:25:22,725 - mmdet - INFO - Epoch [1][1250/1880]	lr: 1.000e-02, eta: 4:22:34, time: 0.956, data_time: 0.010, memory: 8095, loss_rpn_cls: 0.0209, loss_rpn_bbox: 0.0197, loss_cls: 0.1935, acc: 94.1343, loss_bbox: 0.2172, loss: 0.4513
2023-02-10 23:26:09,212 - mmdet - INFO - Epoch [1][1300/1880]	lr: 1.000e-02, eta: 4:22:11, time: 0.930, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0206, loss_rpn_bbox: 0.0208, loss_cls: 0.1958, acc: 94.1758, loss_bbox: 0.2103, loss: 0.4475
2023-02-10 23:26:52,470 - mmdet - INFO - Epoch [1][1350/1880]	lr: 1.000e-02, eta: 4:21:05, time: 0.867, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0196, loss_rpn_bbox: 0.0175, loss_cls: 0.1786, acc: 94.8286, loss_bbox: 0.1863, loss: 0.4020
2023-02-10 23:27:36,358 - mmdet - INFO - Epoch [1][1400/1880]	lr: 1.000e-02, eta: 4:20:07, time: 0.878, data_time: 0.010, memory: 8095, loss_rpn_cls: 0.0183, loss_rpn_bbox: 0.0164, loss_cls: 0.1762, acc: 94.6240, loss_bbox: 0.1918, loss: 0.4027
2023-02-10 23:28:20,499 - mmdet - INFO - Epoch [1][1450/1880]	lr: 1.000e-02, eta: 4:19:13, time: 0.882, data_time: 0.010, memory: 8095, loss_rpn_cls: 0.0182, loss_rpn_bbox: 0.0185, loss_cls: 0.1882, acc: 94.4268, loss_bbox: 0.2015, loss: 0.4264
2023-02-10 23:29:06,236 - mmdet - INFO - Epoch [1][1500/1880]	lr: 1.000e-02, eta: 4:18:39, time: 0.914, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0223, loss_rpn_bbox: 0.0187, loss_cls: 0.1789, acc: 94.6172, loss_bbox: 0.1957, loss: 0.4156
2023-02-10 23:29:50,997 - mmdet - INFO - Epoch [1][1550/1880]	lr: 1.000e-02, eta: 4:17:53, time: 0.895, data_time: 0.012, memory: 8095, loss_rpn_cls: 0.0199, loss_rpn_bbox: 0.0181, loss_cls: 0.1797, acc: 94.4116, loss_bbox: 0.2041, loss: 0.4219
2023-02-10 23:30:35,155 - mmdet - INFO - Epoch [1][1600/1880]	lr: 1.000e-02, eta: 4:17:01, time: 0.883, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0201, loss_rpn_bbox: 0.0203, loss_cls: 0.1993, acc: 93.9106, loss_bbox: 0.2211, loss: 0.4607
2023-02-10 23:31:19,476 - mmdet - INFO - Epoch [1][1650/1880]	lr: 1.000e-02, eta: 4:16:11, time: 0.886, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0192, loss_rpn_bbox: 0.0181, loss_cls: 0.1779, acc: 94.4468, loss_bbox: 0.2039, loss: 0.4191
2023-02-10 23:32:06,680 - mmdet - INFO - Epoch [1][1700/1880]	lr: 1.000e-02, eta: 4:15:50, time: 0.944, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0194, loss_rpn_bbox: 0.0184, loss_cls: 0.2004, acc: 93.9390, loss_bbox: 0.2172, loss: 0.4554
2023-02-10 23:32:51,209 - mmdet - INFO - Epoch [1][1750/1880]	lr: 1.000e-02, eta: 4:15:02, time: 0.891, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0184, loss_rpn_bbox: 0.0173, loss_cls: 0.1656, acc: 94.7505, loss_bbox: 0.1928, loss: 0.3940
2023-02-10 23:33:35,102 - mmdet - INFO - Epoch [1][1800/1880]	lr: 1.000e-02, eta: 4:14:07, time: 0.878, data_time: 0.011, memory: 8095, loss_rpn_cls: 0.0159, loss_rpn_bbox: 0.0183, loss_cls: 0.1821, acc: 94.0576, loss_bbox: 0.2181, loss: 0.4345
2023-02-10 23:34:20,743 - mmdet - INFO - Epoch [1][1850/1880]	lr: 1.000e-02, eta: 4:13:30, time: 0.913, data_time: 0.012, memory: 8095, loss_rpn_cls: 0.0187, loss_rpn_bbox: 0.0185, loss_cls: 0.1685, acc: 94.6538, loss_bbox: 0.1958, loss: 0.4015
2023-02-10 23:34:45,457 - mmdet - INFO - Saving checkpoint at 1 epochs
2023-02-10 23:35:54,799 - mmdet - INFO - 
+-------------+------+-------+--------+-------+
| class       | gts  | dets  | recall | ap    |
+-------------+------+-------+--------+-------+
| aeroplane   | 155  | 1057  | 0.916  | 0.628 |
| bicycle     | 177  | 1570  | 0.921  | 0.665 |
| bird        | 243  | 1256  | 0.885  | 0.643 |
| boat        | 150  | 2081  | 0.813  | 0.391 |
| bottle      | 252  | 1561  | 0.810  | 0.560 |
| bus         | 114  | 1850  | 0.904  | 0.597 |
| car         | 625  | 3226  | 0.922  | 0.786 |
| cat         | 190  | 1086  | 0.958  | 0.762 |
| chair       | 398  | 2595  | 0.814  | 0.478 |
| cow         | 123  | 723   | 0.878  | 0.494 |
| diningtable | 112  | 1001  | 0.750  | 0.378 |
| dog         | 257  | 1485  | 0.942  | 0.661 |
| horse       | 180  | 1848  | 0.956  | 0.723 |
| motorbike   | 172  | 1053  | 0.948  | 0.741 |
| person      | 2332 | 12899 | 0.939  | 0.771 |
| pottedplant | 266  | 2380  | 0.823  | 0.476 |
| sheep       | 127  | 1335  | 0.898  | 0.528 |
| sofa        | 124  | 1332  | 0.863  | 0.502 |
| train       | 152  | 2372  | 0.974  | 0.674 |
| tvmonitor   | 158  | 5291  | 0.930  | 0.658 |
+-------------+------+-------+--------+-------+
| mAP         |      |       |        | 0.606 |
+-------------+------+-------+--------+-------+
2023-02-10 23:35:54,823 - mmdet - INFO - Exp name: faster_rcnn_voc2007.py
2023-02-10 23:35:54,824 - mmdet - INFO - Epoch(val) [1][2510]	mAP: 0.6059, AP50: 0.6060