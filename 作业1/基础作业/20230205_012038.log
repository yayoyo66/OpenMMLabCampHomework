2023-02-05 01:20:38,490 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /data/apps/cuda/11.1
NVCC: Cuda compilation tools, release 11.1, V11.1.74
GCC: gcc (GCC) 7.3.0
PyTorch: 1.10.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0+cu111
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMClassification: 0.25.0+3d4f80d
------------------------------------------------------------

2023-02-05 01:20:38,491 - mmcls - INFO - Distributed training: False
2023-02-05 01:20:38,587 - mmcls - INFO - Config:
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix='data',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file='data/homework1/train.txt',
        classes='data/homework1/classes.txt'),
    val=dict(
        type='ImageNet',
        data_prefix='data',
        ann_file='data/homework1/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes='data/homework1/classes.txt'),
    test=dict(
        type='ImageNet',
        data_prefix='data/imagenet/val',
        ann_file='data/imagenet/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(
    interval=1, metric='accuracy', metric_options=dict(topk=(1, )))
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'checkpoints/cspresnext50_3rdparty_8xb32_in1k_20220329-2cc84d21.pth'
resume_from = None
workflow = [('train', 1)]
model = dict(
    type='ImageClassifier',
    backbone=dict(type='CSPResNeXt', depth=50),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=2048,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[1])
runner = dict(type='EpochBasedRunner', max_epochs=100)
work_dir = 'work/homework1'
gpu_ids = [0]

2023-02-05 01:20:38,589 - mmcls - INFO - Set random seed to 1280518101, deterministic: False
2023-02-05 01:20:38,795 - mmcls - INFO - initialize CSPResNeXt with init_cfg {'type': 'Kaiming', 'layer': 'Conv2d'}
2023-02-05 01:20:38,924 - mmcls - INFO - initialize CSPStage with init_cfg {'type': 'Kaiming', 'layer': 'Conv2d'}
2023-02-05 01:20:38,929 - mmcls - INFO - initialize CSPStage with init_cfg {'type': 'Kaiming', 'layer': 'Conv2d'}
2023-02-05 01:20:38,940 - mmcls - INFO - initialize CSPStage with init_cfg {'type': 'Kaiming', 'layer': 'Conv2d'}
2023-02-05 01:20:38,986 - mmcls - INFO - initialize CSPStage with init_cfg {'type': 'Kaiming', 'layer': 'Conv2d'}
2023-02-05 01:20:39,117 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.stem.0.conv.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stem.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stem.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.expand_conv.conv.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.stages.0.expand_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.expand_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.conv1.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.0.blocks.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.conv2.weight - torch.Size([128, 4, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.0.blocks.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.conv3.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.0.blocks.0.bn3.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.bn3.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.1.conv1.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.0.blocks.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.1.conv2.weight - torch.Size([128, 4, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.0.blocks.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.1.conv3.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.0.blocks.1.bn3.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.1.bn3.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.2.conv1.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.0.blocks.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.2.conv2.weight - torch.Size([128, 4, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.0.blocks.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.2.conv3.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.0.blocks.2.bn3.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.2.bn3.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.atfer_blocks_conv.conv.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.stages.0.atfer_blocks_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.atfer_blocks_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.final_conv.conv.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.stages.0.final_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.final_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.downsample_conv.conv.weight - torch.Size([256, 8, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.stages.1.downsample_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.downsample_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.expand_conv.conv.weight - torch.Size([512, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.stages.1.expand_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.expand_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.0.conv1.weight - torch.Size([256, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.1.blocks.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.0.conv2.weight - torch.Size([256, 8, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.1.blocks.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.0.conv3.weight - torch.Size([256, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.1.blocks.0.bn3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.1.conv1.weight - torch.Size([256, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.1.blocks.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.1.conv2.weight - torch.Size([256, 8, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.1.blocks.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.1.conv3.weight - torch.Size([256, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.1.blocks.1.bn3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.2.conv1.weight - torch.Size([256, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.1.blocks.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.2.conv2.weight - torch.Size([256, 8, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.1.blocks.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.2.conv3.weight - torch.Size([256, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.1.blocks.2.bn3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.atfer_blocks_conv.conv.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.stages.1.atfer_blocks_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.atfer_blocks_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.final_conv.conv.weight - torch.Size([512, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.stages.1.final_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.final_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.downsample_conv.conv.weight - torch.Size([512, 16, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.stages.2.downsample_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.downsample_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.expand_conv.conv.weight - torch.Size([1024, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.stages.2.expand_conv.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.expand_conv.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.0.conv1.weight - torch.Size([512, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.2.blocks.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.0.conv2.weight - torch.Size([512, 16, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.2.blocks.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.0.conv3.weight - torch.Size([512, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.2.blocks.0.bn3.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.1.conv1.weight - torch.Size([512, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.2.blocks.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.1.conv2.weight - torch.Size([512, 16, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.2.blocks.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.1.conv3.weight - torch.Size([512, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.2.blocks.1.bn3.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.2.conv1.weight - torch.Size([512, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.2.blocks.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.2.conv2.weight - torch.Size([512, 16, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.2.blocks.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.2.conv3.weight - torch.Size([512, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.2.blocks.2.bn3.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.3.conv1.weight - torch.Size([512, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.2.blocks.3.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.3.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.3.conv2.weight - torch.Size([512, 16, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.2.blocks.3.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.3.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.3.conv3.weight - torch.Size([512, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.2.blocks.3.bn3.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.4.conv1.weight - torch.Size([512, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.2.blocks.4.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.4.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.4.conv2.weight - torch.Size([512, 16, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.2.blocks.4.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.4.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.4.conv3.weight - torch.Size([512, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.2.blocks.4.bn3.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.4.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.atfer_blocks_conv.conv.weight - torch.Size([512, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.stages.2.atfer_blocks_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.atfer_blocks_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.final_conv.conv.weight - torch.Size([1024, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.stages.2.final_conv.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.final_conv.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.downsample_conv.conv.weight - torch.Size([1024, 32, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.stages.3.downsample_conv.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.downsample_conv.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.expand_conv.conv.weight - torch.Size([2048, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.stages.3.expand_conv.bn.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.expand_conv.bn.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.0.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.3.blocks.0.bn1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.0.bn1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.0.conv2.weight - torch.Size([1024, 32, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.3.blocks.0.bn2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.0.bn2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.0.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.3.blocks.0.bn3.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.1.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.3.blocks.1.bn1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.1.bn1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.1.conv2.weight - torch.Size([1024, 32, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.3.blocks.1.bn2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.1.bn2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.1.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stages.3.blocks.1.bn3.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.atfer_blocks_conv.conv.weight - torch.Size([1024, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.stages.3.atfer_blocks_conv.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.atfer_blocks_conv.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.final_conv.conv.weight - torch.Size([2048, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.stages.3.final_conv.bn.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.final_conv.bn.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-05 01:20:44,433 - mmcls - INFO - load checkpoint from local path: checkpoints/cspresnext50_3rdparty_8xb32_in1k_20220329-2cc84d21.pth
2023-02-05 01:20:44,567 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 2048]) from checkpoint, the shape in current model is torch.Size([5, 2048]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-05 01:20:44,569 - mmcls - INFO - Start running, host: scz0aua@g0097, work_dir: /data/run01/scz0aua/mmclassification/work/homework1
2023-02-05 01:20:44,569 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-05 01:20:44,569 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2023-02-05 01:20:44,569 - mmcls - INFO - Checkpoints will be saved to /data/run01/scz0aua/mmclassification/work/homework1 by HardDiskBackend.
2023-02-05 01:20:53,416 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-05 01:20:54,913 - mmcls - INFO - Epoch(val) [1][18]	accuracy_top-1: 90.7343
2023-02-05 01:21:03,149 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-05 01:21:04,244 - mmcls - INFO - Epoch(val) [2][18]	accuracy_top-1: 91.4336
2023-02-05 01:21:12,481 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-05 01:21:13,575 - mmcls - INFO - Epoch(val) [3][18]	accuracy_top-1: 91.7832
2023-02-05 01:21:21,798 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-05 01:21:22,881 - mmcls - INFO - Epoch(val) [4][18]	accuracy_top-1: 92.1329
2023-02-05 01:21:31,096 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-05 01:21:32,184 - mmcls - INFO - Epoch(val) [5][18]	accuracy_top-1: 91.9580
2023-02-05 01:21:40,413 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-05 01:21:41,508 - mmcls - INFO - Epoch(val) [6][18]	accuracy_top-1: 92.4825
2023-02-05 01:21:49,756 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-05 01:21:50,917 - mmcls - INFO - Epoch(val) [7][18]	accuracy_top-1: 93.5315
2023-02-05 01:21:59,170 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-05 01:22:00,306 - mmcls - INFO - Epoch(val) [8][18]	accuracy_top-1: 92.6573
2023-02-05 01:22:08,567 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-05 01:22:09,667 - mmcls - INFO - Epoch(val) [9][18]	accuracy_top-1: 93.5315
2023-02-05 01:22:17,931 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-05 01:22:19,025 - mmcls - INFO - Epoch(val) [10][18]	accuracy_top-1: 93.5315
2023-02-05 01:22:27,261 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-05 01:22:28,620 - mmcls - INFO - Epoch(val) [11][18]	accuracy_top-1: 93.5315
2023-02-05 01:22:36,883 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-05 01:22:37,981 - mmcls - INFO - Epoch(val) [12][18]	accuracy_top-1: 93.0070
2023-02-05 01:22:46,235 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-05 01:22:47,842 - mmcls - INFO - Epoch(val) [13][18]	accuracy_top-1: 94.0559
2023-02-05 01:22:56,115 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-05 01:22:57,213 - mmcls - INFO - Epoch(val) [14][18]	accuracy_top-1: 93.5315
2023-02-05 01:23:05,476 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-05 01:23:06,581 - mmcls - INFO - Epoch(val) [15][18]	accuracy_top-1: 92.8322
2023-02-05 01:23:14,843 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-05 01:23:15,940 - mmcls - INFO - Epoch(val) [16][18]	accuracy_top-1: 92.6573
2023-02-05 01:23:24,200 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-05 01:23:25,304 - mmcls - INFO - Epoch(val) [17][18]	accuracy_top-1: 93.1818
2023-02-05 01:23:33,588 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-05 01:23:35,006 - mmcls - INFO - Epoch(val) [18][18]	accuracy_top-1: 93.8811
2023-02-05 01:23:43,297 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-05 01:23:44,402 - mmcls - INFO - Epoch(val) [19][18]	accuracy_top-1: 94.0559
2023-02-05 01:23:52,702 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-05 01:23:53,836 - mmcls - INFO - Epoch(val) [20][18]	accuracy_top-1: 94.2308
2023-02-05 01:24:02,117 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-05 01:24:03,216 - mmcls - INFO - Epoch(val) [21][18]	accuracy_top-1: 94.0559
2023-02-05 01:24:11,520 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-05 01:24:12,612 - mmcls - INFO - Epoch(val) [22][18]	accuracy_top-1: 94.2308
2023-02-05 01:24:20,908 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-05 01:24:21,999 - mmcls - INFO - Epoch(val) [23][18]	accuracy_top-1: 94.5804
2023-02-05 01:24:30,299 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-05 01:24:31,380 - mmcls - INFO - Epoch(val) [24][18]	accuracy_top-1: 92.8322
2023-02-05 01:24:39,647 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-05 01:24:40,734 - mmcls - INFO - Epoch(val) [25][18]	accuracy_top-1: 94.5804
2023-02-05 01:24:49,028 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-05 01:24:50,123 - mmcls - INFO - Epoch(val) [26][18]	accuracy_top-1: 93.8811
2023-02-05 01:24:58,401 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-05 01:24:59,491 - mmcls - INFO - Epoch(val) [27][18]	accuracy_top-1: 93.5315
2023-02-05 01:25:07,756 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-05 01:25:08,843 - mmcls - INFO - Epoch(val) [28][18]	accuracy_top-1: 94.2308
2023-02-05 01:25:17,098 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-05 01:25:18,194 - mmcls - INFO - Epoch(val) [29][18]	accuracy_top-1: 94.2308
2023-02-05 01:25:26,495 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-05 01:25:27,593 - mmcls - INFO - Epoch(val) [30][18]	accuracy_top-1: 93.7063
2023-02-05 01:25:35,881 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-05 01:25:36,966 - mmcls - INFO - Epoch(val) [31][18]	accuracy_top-1: 94.5804
2023-02-05 01:25:45,251 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-05 01:25:46,352 - mmcls - INFO - Epoch(val) [32][18]	accuracy_top-1: 94.0559
2023-02-05 01:25:54,613 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-05 01:25:55,706 - mmcls - INFO - Epoch(val) [33][18]	accuracy_top-1: 94.2308
2023-02-05 01:26:03,971 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-05 01:26:05,194 - mmcls - INFO - Epoch(val) [34][18]	accuracy_top-1: 94.5804
2023-02-05 01:26:13,476 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-05 01:26:14,564 - mmcls - INFO - Epoch(val) [35][18]	accuracy_top-1: 94.5804
2023-02-05 01:26:22,844 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-05 01:26:23,950 - mmcls - INFO - Epoch(val) [36][18]	accuracy_top-1: 95.1049
2023-02-05 01:26:32,230 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-05 01:26:33,330 - mmcls - INFO - Epoch(val) [37][18]	accuracy_top-1: 94.7552
2023-02-05 01:26:41,613 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-05 01:26:42,717 - mmcls - INFO - Epoch(val) [38][18]	accuracy_top-1: 94.4056
2023-02-05 01:26:51,002 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-05 01:26:52,097 - mmcls - INFO - Epoch(val) [39][18]	accuracy_top-1: 94.5804
2023-02-05 01:27:00,365 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-05 01:27:01,468 - mmcls - INFO - Epoch(val) [40][18]	accuracy_top-1: 94.7552
2023-02-05 01:27:09,739 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-05 01:27:10,894 - mmcls - INFO - Epoch(val) [41][18]	accuracy_top-1: 94.9301
2023-02-05 01:27:19,157 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-05 01:27:20,265 - mmcls - INFO - Epoch(val) [42][18]	accuracy_top-1: 94.0559
2023-02-05 01:27:28,551 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-05 01:27:29,638 - mmcls - INFO - Epoch(val) [43][18]	accuracy_top-1: 94.2308
2023-02-05 01:27:37,905 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-05 01:27:39,003 - mmcls - INFO - Epoch(val) [44][18]	accuracy_top-1: 94.7552
2023-02-05 01:27:47,287 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-05 01:27:48,454 - mmcls - INFO - Epoch(val) [45][18]	accuracy_top-1: 93.3566
2023-02-05 01:27:56,746 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-05 01:27:57,853 - mmcls - INFO - Epoch(val) [46][18]	accuracy_top-1: 94.7552
2023-02-05 01:28:06,121 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-05 01:28:07,218 - mmcls - INFO - Epoch(val) [47][18]	accuracy_top-1: 94.9301
2023-02-05 01:28:15,496 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-05 01:28:16,623 - mmcls - INFO - Epoch(val) [48][18]	accuracy_top-1: 95.6294
2023-02-05 01:28:24,918 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-05 01:28:26,017 - mmcls - INFO - Epoch(val) [49][18]	accuracy_top-1: 95.4545
2023-02-05 01:28:34,298 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-05 01:28:36,251 - mmcls - INFO - Epoch(val) [50][18]	accuracy_top-1: 95.4545
2023-02-05 01:28:44,511 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-05 01:28:45,706 - mmcls - INFO - Epoch(val) [51][18]	accuracy_top-1: 94.4056
2023-02-05 01:28:54,013 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-05 01:28:55,108 - mmcls - INFO - Epoch(val) [52][18]	accuracy_top-1: 95.1049
2023-02-05 01:29:03,386 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-05 01:29:04,475 - mmcls - INFO - Epoch(val) [53][18]	accuracy_top-1: 95.2797
2023-02-05 01:29:12,757 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-05 01:29:13,862 - mmcls - INFO - Epoch(val) [54][18]	accuracy_top-1: 95.8042
2023-02-05 01:29:22,140 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-05 01:29:23,249 - mmcls - INFO - Epoch(val) [55][18]	accuracy_top-1: 94.7552
2023-02-05 01:29:31,518 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-05 01:29:32,609 - mmcls - INFO - Epoch(val) [56][18]	accuracy_top-1: 94.5804
2023-02-05 01:29:40,885 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-05 01:29:41,989 - mmcls - INFO - Epoch(val) [57][18]	accuracy_top-1: 95.4545
2023-02-05 01:29:50,267 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-05 01:29:51,357 - mmcls - INFO - Epoch(val) [58][18]	accuracy_top-1: 95.1049
2023-02-05 01:29:59,604 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-05 01:30:00,704 - mmcls - INFO - Epoch(val) [59][18]	accuracy_top-1: 95.8042
2023-02-05 01:30:08,994 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-05 01:30:10,093 - mmcls - INFO - Epoch(val) [60][18]	accuracy_top-1: 95.2797
2023-02-05 01:30:18,383 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-05 01:30:19,485 - mmcls - INFO - Epoch(val) [61][18]	accuracy_top-1: 95.2797
2023-02-05 01:30:27,764 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-05 01:30:28,853 - mmcls - INFO - Epoch(val) [62][18]	accuracy_top-1: 95.4545
2023-02-05 01:30:37,139 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-05 01:30:38,244 - mmcls - INFO - Epoch(val) [63][18]	accuracy_top-1: 95.2797
2023-02-05 01:30:46,528 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-05 01:30:47,746 - mmcls - INFO - Epoch(val) [64][18]	accuracy_top-1: 95.2797
2023-02-05 01:30:56,037 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-05 01:30:57,129 - mmcls - INFO - Epoch(val) [65][18]	accuracy_top-1: 95.1049
2023-02-05 01:31:05,394 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-05 01:31:06,473 - mmcls - INFO - Epoch(val) [66][18]	accuracy_top-1: 95.8042
2023-02-05 01:31:14,773 - mmcls - INFO - Saving checkpoint at 67 epochs
2023-02-05 01:31:15,874 - mmcls - INFO - Epoch(val) [67][18]	accuracy_top-1: 95.8042
2023-02-05 01:31:24,147 - mmcls - INFO - Saving checkpoint at 68 epochs
2023-02-05 01:31:25,233 - mmcls - INFO - Epoch(val) [68][18]	accuracy_top-1: 95.1049
2023-02-05 01:31:33,515 - mmcls - INFO - Saving checkpoint at 69 epochs
2023-02-05 01:31:34,604 - mmcls - INFO - Epoch(val) [69][18]	accuracy_top-1: 94.2308
2023-02-05 01:31:42,889 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-05 01:31:43,981 - mmcls - INFO - Epoch(val) [70][18]	accuracy_top-1: 95.8042
2023-02-05 01:31:52,256 - mmcls - INFO - Saving checkpoint at 71 epochs
2023-02-05 01:31:53,401 - mmcls - INFO - Epoch(val) [71][18]	accuracy_top-1: 95.8042
2023-02-05 01:32:01,664 - mmcls - INFO - Saving checkpoint at 72 epochs
2023-02-05 01:32:02,764 - mmcls - INFO - Epoch(val) [72][18]	accuracy_top-1: 95.2797
2023-02-05 01:32:11,060 - mmcls - INFO - Saving checkpoint at 73 epochs
2023-02-05 01:32:12,160 - mmcls - INFO - Epoch(val) [73][18]	accuracy_top-1: 96.1538
2023-02-05 01:32:20,446 - mmcls - INFO - Saving checkpoint at 74 epochs
2023-02-05 01:32:21,532 - mmcls - INFO - Epoch(val) [74][18]	accuracy_top-1: 95.1049
2023-02-05 01:32:29,823 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-05 01:32:30,911 - mmcls - INFO - Epoch(val) [75][18]	accuracy_top-1: 95.8042
2023-02-05 01:32:39,200 - mmcls - INFO - Saving checkpoint at 76 epochs
2023-02-05 01:32:40,292 - mmcls - INFO - Epoch(val) [76][18]	accuracy_top-1: 95.6294
2023-02-05 01:32:48,551 - mmcls - INFO - Saving checkpoint at 77 epochs
2023-02-05 01:32:49,645 - mmcls - INFO - Epoch(val) [77][18]	accuracy_top-1: 95.8042
2023-02-05 01:32:57,923 - mmcls - INFO - Saving checkpoint at 78 epochs
2023-02-05 01:32:59,017 - mmcls - INFO - Epoch(val) [78][18]	accuracy_top-1: 95.2797
2023-02-05 01:33:07,279 - mmcls - INFO - Saving checkpoint at 79 epochs
2023-02-05 01:33:08,361 - mmcls - INFO - Epoch(val) [79][18]	accuracy_top-1: 95.4545
2023-02-05 01:33:16,641 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-05 01:33:17,739 - mmcls - INFO - Epoch(val) [80][18]	accuracy_top-1: 95.2797
2023-02-05 01:33:26,005 - mmcls - INFO - Saving checkpoint at 81 epochs
2023-02-05 01:33:27,106 - mmcls - INFO - Epoch(val) [81][18]	accuracy_top-1: 95.8042
2023-02-05 01:33:35,383 - mmcls - INFO - Saving checkpoint at 82 epochs
2023-02-05 01:33:36,462 - mmcls - INFO - Epoch(val) [82][18]	accuracy_top-1: 95.4545
2023-02-05 01:33:44,711 - mmcls - INFO - Saving checkpoint at 83 epochs
2023-02-05 01:33:45,804 - mmcls - INFO - Epoch(val) [83][18]	accuracy_top-1: 95.6294
2023-02-05 01:33:54,071 - mmcls - INFO - Saving checkpoint at 84 epochs
2023-02-05 01:33:55,157 - mmcls - INFO - Epoch(val) [84][18]	accuracy_top-1: 95.4545
2023-02-05 01:34:03,418 - mmcls - INFO - Saving checkpoint at 85 epochs
2023-02-05 01:34:04,511 - mmcls - INFO - Epoch(val) [85][18]	accuracy_top-1: 95.8042
2023-02-05 01:34:12,783 - mmcls - INFO - Saving checkpoint at 86 epochs
2023-02-05 01:34:13,869 - mmcls - INFO - Epoch(val) [86][18]	accuracy_top-1: 95.2797
2023-02-05 01:34:22,141 - mmcls - INFO - Saving checkpoint at 87 epochs
2023-02-05 01:34:23,241 - mmcls - INFO - Epoch(val) [87][18]	accuracy_top-1: 96.5035
2023-02-05 01:34:31,520 - mmcls - INFO - Saving checkpoint at 88 epochs
2023-02-05 01:34:32,609 - mmcls - INFO - Epoch(val) [88][18]	accuracy_top-1: 95.9790
2023-02-05 01:34:40,907 - mmcls - INFO - Saving checkpoint at 89 epochs
2023-02-05 01:34:42,004 - mmcls - INFO - Epoch(val) [89][18]	accuracy_top-1: 95.6294
2023-02-05 01:34:50,287 - mmcls - INFO - Saving checkpoint at 90 epochs
2023-02-05 01:34:51,376 - mmcls - INFO - Epoch(val) [90][18]	accuracy_top-1: 96.1538
2023-02-05 01:34:59,664 - mmcls - INFO - Saving checkpoint at 91 epochs
2023-02-05 01:35:00,760 - mmcls - INFO - Epoch(val) [91][18]	accuracy_top-1: 95.2797
2023-02-05 01:35:09,021 - mmcls - INFO - Saving checkpoint at 92 epochs
2023-02-05 01:35:10,125 - mmcls - INFO - Epoch(val) [92][18]	accuracy_top-1: 96.3287
2023-02-05 01:35:18,405 - mmcls - INFO - Saving checkpoint at 93 epochs
2023-02-05 01:35:19,491 - mmcls - INFO - Epoch(val) [93][18]	accuracy_top-1: 95.6294
2023-02-05 01:35:27,754 - mmcls - INFO - Saving checkpoint at 94 epochs
2023-02-05 01:35:28,847 - mmcls - INFO - Epoch(val) [94][18]	accuracy_top-1: 95.2797
2023-02-05 01:35:37,128 - mmcls - INFO - Saving checkpoint at 95 epochs
2023-02-05 01:35:38,226 - mmcls - INFO - Epoch(val) [95][18]	accuracy_top-1: 95.8042
2023-02-05 01:35:46,503 - mmcls - INFO - Saving checkpoint at 96 epochs
2023-02-05 01:35:47,595 - mmcls - INFO - Epoch(val) [96][18]	accuracy_top-1: 95.2797
2023-02-05 01:35:55,863 - mmcls - INFO - Saving checkpoint at 97 epochs
2023-02-05 01:35:57,309 - mmcls - INFO - Epoch(val) [97][18]	accuracy_top-1: 95.1049
2023-02-05 01:36:05,580 - mmcls - INFO - Saving checkpoint at 98 epochs
2023-02-05 01:36:06,670 - mmcls - INFO - Epoch(val) [98][18]	accuracy_top-1: 95.1049
2023-02-05 01:36:14,952 - mmcls - INFO - Saving checkpoint at 99 epochs
2023-02-05 01:36:16,038 - mmcls - INFO - Epoch(val) [99][18]	accuracy_top-1: 95.8042
2023-02-05 01:36:24,299 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-05 01:36:25,391 - mmcls - INFO - Epoch(val) [100][18]	accuracy_top-1: 95.6294
